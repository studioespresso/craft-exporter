{% if exportId is not defined %}
    {% redirect 'exporter' %}
{% endif %}

{% set export = craft.exports.id(exportId).one() %}

{% import "_includes/forms" as forms %}

<form sprig s-action="exporter/element/step2" s-method="post">
    {{ redirectInput('') }}
    {% if export.id %}
        {{ hiddenInput('elementId', export.id) }}
    {% endif %}
    {% set attributes = export.getAttributes() %}
    {% set fields = export.getFields() %}

    <style>
        .default-fields .field, .custom-fields .field {
            margin: 12px 0;
        }
    </style>

    <div class="default-fields">
        <h2>{{ "Which default fields do you want to include in this export?"|t('exporter') }}</h2>
        {{ forms.checkboxField({
            label: 'ID'|t('exporter'),
            name: "attributes[id]",
            value: 'id',
            checked: attributes['id'] ?? false
        }) }}
        {{ forms.checkboxField({
            label: 'Title'|t('exporter'),
            id: 'default-title',
            name: "attributes[title]",
            value: 'title',
            checked: attributes['title'] ?? false
        }) }}
        {{ forms.checkboxField({
            label: 'Date created'|t('exporter'),
            name: "attributes[dateCreated]",
            value: 'dateCreated',
            checked: attributes['dateCreated'] ?? false
        }) }}
    </div>
    <hr>

    <div class="custom-fields">
        <h2>{{ "Which custom fields do you want to include in this export?"|t('exporter') }}</h2>
        {% set availableFields = export.getSupportedFields(export.getElementQuery().one()) %}
        {% for field in availableFields %}
            {% set parser = craft.exporter.getFieldParser(field) %}
            {{ forms.checkboxField({
                label: field.name,
                name: "fields[" ~ field.handle ~ "][handle]",
                value: field.handle,
                checked: fields[field.handle] ?? false
            }) }}
            {# TODO Only show parser option if field is enabled  #}
            {% if parser and parser.getOptionType()|length %}
                {% switch parser.getOptionType() %}
                {% case 'select' %}
                    <div class="input ltr">
                        <div class="select">
                            {# TODO: aria labels for this? #}
                            {{ d(parser.getOptions()) }}
                            <select name="fields[{{ field.handle }}][property]" id="">
                                {% for key, label in parser.getOptions() %}
                                    <option value="{{ key }}">{{ label }}</option>
                                {% endfor %}
                            </select>
                            {# TODO: Add custom option? #}
                        </div>
                    </div>
                {% endswitch %}
            {% endif %}
        {% endfor %}
    </div>


    <div class="field">
        {{ hiddenInput('nextStep', '3') }}
        <button type="submit" class="btn submit">{{ "Next" }}</button>
    </div>

</form>